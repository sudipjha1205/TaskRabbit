{"ast":null,"code":"var _jsxFileName = \"/home/sudip/taskrabbit-frontend/src/Components/Authentication/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthContext.js\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setAuthenticated] = useState(() => {\n    // Initialize the authentication state from localStorage or other storage mechanism\n    return localStorage.getItem('isAuthenticated') === 'true';\n  });\n  const login = data => {\n    setAuthenticated(true);\n    localStorage.setItem('isAuthenticated', 'true');\n    localStorage.setItem('user', JSON.stringify(data));\n    console.log(JSON.parse(localStorage.getItem('user'))['user']);\n  };\n  const logout = () => {\n    setAuthenticated(false);\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('user');\n  };\n\n  // Use useEffect to check the authentication state on component mount\n  useEffect(() => {\n    const storedAuthState = localStorage.getItem('isAuthenticated');\n    if (storedAuthState !== null) {\n      setAuthenticated(storedAuthState === 'true');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"rASQviavWkQ8iUr94nSoJNZUFkM=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setAuthenticated","localStorage","getItem","login","data","setItem","JSON","stringify","console","log","parse","logout","removeItem","storedAuthState","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/home/sudip/taskrabbit-frontend/src/Components/Authentication/AuthContext.js"],"sourcesContent":["// AuthContext.js\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setAuthenticated] = useState(() => {\n    // Initialize the authentication state from localStorage or other storage mechanism\n    return localStorage.getItem('isAuthenticated') === 'true';\n  });\n\n  const login = (data) => {\n    setAuthenticated(true);\n    localStorage.setItem('isAuthenticated', 'true');\n    localStorage.setItem('user',JSON.stringify(data));\n    console.log(JSON.parse(localStorage.getItem('user'))['user']);\n  };\n\n  const logout = () => {\n    setAuthenticated(false);\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('user');\n  };\n\n  // Use useEffect to check the authentication state on component mount\n  useEffect(() => {\n    const storedAuthState = localStorage.getItem('isAuthenticated');\n    if (storedAuthState !== null) {\n      setAuthenticated(storedAuthState === 'true');\n    }\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACzD;IACA,OAAOU,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,KAAK,MAAM;EAC3D,CAAC,CAAC;EAEF,MAAMC,KAAK,GAAIC,IAAI,IAAK;IACtBJ,gBAAgB,CAAC,IAAI,CAAC;IACtBC,YAAY,CAACI,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;IAC/CJ,YAAY,CAACI,OAAO,CAAC,MAAM,EAACC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;IACjDI,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,KAAK,CAACT,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMS,MAAM,GAAGA,CAAA,KAAM;IACnBX,gBAAgB,CAAC,KAAK,CAAC;IACvBC,YAAY,CAACW,UAAU,CAAC,iBAAiB,CAAC;IAC1CX,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;;EAED;EACApB,SAAS,CAAC,MAAM;IACd,MAAMqB,eAAe,GAAGZ,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC/D,IAAIW,eAAe,KAAK,IAAI,EAAE;MAC5Bb,gBAAgB,CAACa,eAAe,KAAK,MAAM,CAAC;IAC9C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,eAAe;MAAEI,KAAK;MAAEQ;IAAO,CAAE;IAAAd,QAAA,EAC7DA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACrB,EAAA,CAhCWF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAkCzB,OAAO,MAAMyB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOhC,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAAC2B,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}